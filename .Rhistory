alpha.beta.models.AB <- fecundity.model(fecundity.data, fit.alphas=TRUE, fit.betas=TRUE)
}
## add beta models to list
alpha.beta.model.list[[paste0(t,".",f,".","beta.model")]]<-alpha.beta.models.AB
## print model statistics to summary DF for alpha models
sum$Model[b]<-paste0(t)
sum$beta[b]<-paste0("F")
sum$focal[b]<-paste0(f)
sum$coef[b]<-length(alpha.models.AB$coefficients)
sum$RMSE[b]<-sqrt(mean(alpha.models.AB$residuals^2))
sum$AIC[b]<-AIC(alpha.models.AB)
sum$likeli[b]<-logLik(alpha.models.AB)
## increment summary DF
b<-b+1
## print model statistics to summary DF for beta models
if (beta==T){
sum$Model[b]<-paste0(t)
sum$beta[b]<-paste0("T")
sum$focal[b]<-paste0(f)
sum$coef[b]<-length(alpha.beta.models.AB$coefficients)
sum$RMSE[b]<-sqrt(mean(alpha.beta.models.AB$residuals^2))
sum$AIC[b]<-AIC(alpha.beta.models.AB)
sum$likeli[b]<-logLik(alpha.beta.models.AB)
## increment summary DF
b<-b+1
rm(alpha.beta.models.AB)
rm(alpha.models.AB)
}
##
} # end for each type t
} # end for each focal f
###################
## clean summary DF
sum<-unique(sum)
sum<-sum[-dim(sum)[1],]
## write summary csv
write.csv(sum,paste0("Neigh.ID/output/",D,".neighbor.ID.summary.2019.by.species.csv"))
## save model lists
saveRDS(alpha.model.list,paste0("Neigh.ID/output/",D,".alpha.model.list.by.species.rds"))
saveRDS(alpha.beta.model.list,paste0("Neigh.ID/output/",D,".alpha.beta.model.list.by.species.rds"))
} # close for each data D
print("Neighbor ID analysis done - by species")
# clear R workspace
rm(list=ls())
############## load libraries #################
library(mvabund) # for model fitting
library(cluster) # for gower similarity and pam
library(plyr) # for rbind.fill
library(dplyr) # for data cleaning & piping
library(Cairo) # to save plot image
library(tidyr) # for gather()
library(fmsb) # for radar plot
# list data types
datas<-c("Australia","Spain")
# list focal identity types
type<-c("NA","NA.part","A","AB")
##############################################
# read and clean raw data
source("clean.raw.data.2019.R")
# run focal ID analysis
source("Focal.ID/focal.ID.model.run.2019.R")
# run rare neighbor species analysis
source("Species.grouping/Rare.grouping/rare.species.GROUPED.2019.R")
source("Species.grouping/Rare.grouping/rare.species.REMOVED.2019.R")
# create clusters
source("Species.grouping/Functional.trait.grouping/create.clusters.2019.R")
# create data list with various neighbor groupings
source("Neigh.ID/making.data.list.groupings.2019.R")
# run neighbor ID analysis
source("Neigh.ID/run.neigh.ID.whole.model.2019.R")
source("Neigh.ID/run.neigh.ID.by.species.2019.R")
# make radar plots
source("Neigh.ID/radar.plots.2019.R")
# read in other species grouping results (Australia)
Mayfield.summary<-read.csv("Neigh.ID/output/Australia.neighbor.ID.summary.2019.by.species.csv")
# read in rare species grouping results (Australia)
rares<-read.csv("Species.grouping/Rare.grouping/output/rare.grouped.by.species.2019.csv")
# read in rare species grouping results (Australia)
rares<-read.csv("Species.grouping/Rare.grouping/output/rare.grouped.by.species.2019.csv")
# read in other species grouping results (Australia)
Australia.summary<-read.csv("Neigh.ID/output/Australia.neighbor.ID.summary.2019.by.species.csv")
Australia.summary<-Australia.summary[,-1]
# merge rare grouping with other groupings
rares.M<-rares[which(rares$Model=="Australia"),]
rares.M$Model<-"group.rares"
Australia.summary<-rbind(Australia.summary,rares.M)
# read in rare speies grouping results (Spain)
rares.G<-rares[which(rares$Model=="Spain"),]
rares.G$Model<-"group.rares"
# read in other grouping resluts (Spain)
Spain.summary<-read.csv("Neigh.ID/output/Spain.neighbor.ID.summary.2019.by.species.csv")
Spain.summary<-Spain.summary[,-1]
# merge results together (Spain)
Spain.summary<-rbind(Spain.summary,rares.G)
##########################
# catch plot as pdf
CairoPDF(width=17,height=8,"figures/BOTH_radar_updated.pdf", bg="transparent")
# transform dataframe to long
MM<-Australia.summary %>%
gather(key=variable,value,-c(Model,focal,beta))
MM<-spread(MM,Model,value)
# list species names fully
M.nm<-c("A.caryophylla","H.glabra","P.gnaphalioides","T.ornata","U.anthemoides","W.acuminata")
# don't plot results for these groups as they are summarized elsewhere
groups<-unique(Australia.summary$Model)
groups<-groups[!groups%in%c("full","number.indivs")]
#subtract values from full value
subs<-MM[,which(names(MM) %in% groups)]-MM$full
# attach data together
JJ<-cbind(subs,focal=MM$focal,beta=MM$beta,variable=MM$variable)
# only pull out the data with includes AIC and HOIs
JJ<-JJ[which(JJ$beta=="TRUE"& JJ$variable=="AIC"),]
# only use the functional groups in groups
KK<-JJ[,which(names(JJ) %in% groups)]
# rownames are focal species names
rownames(KK)<-M.nm
# columns names are functional grouping names
names(KK)<-c("Trait Complex","Plant Family","Functional Type","Life Form","Native/Exotic","Group Rares")
# build dataframe specific to radar plot specificaton where the irst 3 rows need to be the max lim of plot,
#   the min lim of plots, and any lines you want to add to the plots (i.e. the dashed line a 0)
data<-data.frame(rbind(rep(20,dim(KK)[2]) , rep(-160,dim(KK)[2]) , rep(0,dim(KK)[2]),KK))
#calculate how many times each species X each functional group is less than 0 (will be center numbers)
HH<-apply(KK,2,function(x) length(which(x < 0)==T))
# assign colors for lines in plot
h<-c("firebrick2","darkorange1","gold","chartreuse2",
"dodgerblue","purple")
# make plot
colors_border<-c("black",h)
line.wd<-c(2,2,2,2,2,2,2)
line.typ<-c(5,1,1,1,1,1,1)
point.type<-c(32,20,20,20,20,20,20)
par(mfrow=c(1,2))
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , plwd=line.wd , plty=line.typ, pty=point.type,
#custom the grid
cglcol="grey70", cglty=1, axislabcol="grey40", seg=9, caxislabels=round(seq(-160,20,length.out=10)), cglwd=1.3,
#custom labels
vlcex=1.3, bg="grey"
)
legend("bottomleft", legend = rownames(data[-c(1:3),]), text.font=3,
bty = "n", pch=20 , col=colors_border[2:10] , text.col = "grey", cex=1, pt.cex=3)
# make inner numbers
text.x<-c(0,-0.06,-.06,0,.06,.06)
text.y<-c(.07,.04,-.04,-.07,-.04,.04)
text.labels<-c(HH)
text(text.x,text.y,text.labels,cex=1)
######## Spain data ###########################
# make data long
GG<-Spain.summary %>%
gather(key=variable,value,-c(Model,focal,beta))
GG<-spread(GG,Model,value)
# use only specific functional group results for plot
groups<-unique(Spain.summary$Model)
groups<-groups[!groups%in%c("full","number.indivs","native.exotic")]
# subtract values from full model
FF<-GG[,which(names(GG) %in% groups)]-GG$full
# bind data together
JJ<-cbind(FF,focal=GG$focal,beta=GG$beta,variable=GG$variable)
# pull out only AIC and HOI data
JJ<-JJ[which(JJ$beta=="TRUE"& JJ$variable=="AIC"),]
# use only the data in the selected functional groups
KK<-JJ[,which(names(JJ) %in% groups)]
colnames(KK)<-c("Trait Complex","Plant Family","Functional Type","Life Form","Group Rares")
# list species names full
G.nm<-c("C.tennuiflorum","C.fuscatum","C.mixtum","H.marinum","L.maroccanus","L.tribracteatum",
"P.incurva","P.coronopus","P.maritimus","P.paludosa","S.soda","S.laciniata")
rownames(KK)<-G.nm # assign species names to rownames
# bind data together specifically for radar plot rad-in strucutre
data<-data.frame(rbind(rep(15,dim(KK)[2]) , rep(-60,dim(KK)[2]) , rep(0,dim(KK)[2]),KK))
# summarize number of focals X groupings under 0 (will be venter numbers)
HH<-apply(KK,2,function(x) length(which(x < 0)==T))
# make plot
h<-c("firebrick2","darkorange1","gold","chartreuse2","darkgreen","cyan2","dodgerblue","blue4","purple","magenta2","chocolate4","lightslategrey")
colors_border<-c("black",h)
line.wd<-c(2,2,2,2,2,2,2,2,2,2,2,2,2)
line.typ<-c(5,1,1,1,1,1,1,1,1,1,1,1,1)
point.type<-c(32,20,20,20,20,20,20,20,20,20,20,20,20)
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , plwd=line.wd , plty=line.typ, pty=point.type,
#custom the grid
cglcol="grey70", cglty=1, axislabcol="grey40", seg=5, caxislabels=round(seq(-60,15,length.out=6)), cglwd=1.3,
#custom labels
vlcex=1.2, bg="grey"
)
# add legend
legend("bottomleft", legend = rownames(data[-c(1:3),]), text.font=3,
bty = "n", pch=20 , col=colors_border[2:13] , text.col = "grey", cex=1, pt.cex=3,ncol=1)
#make center numbers
text.x<-c(0,-0.085,-.065,.065,.085)
text.y<-c(.09,.04,-.07,-.07,.04)
text.labels<-c(HH)
text(text.x,text.y,text.labels,cex=1.0)
# end plot catch
dev.off()
print("Radar plot done")
# read in rare species grouping results (Australia)
rares<-read.csv("Species.grouping/Rare.grouping/output/rare.grouped.by.species.2019.csv")
# read in other species grouping results (Australia)
Australia.summary<-read.csv("Neigh.ID/output/Australia.neighbor.ID.summary.2019.by.species.csv")
Australia.summary<-Australia.summary[,-1]
# merge rare grouping with other groupings
rares.M<-rares[which(rares$Model=="Australia"),]
rares.M$Model<-"group.rares"
Australia.summary<-rbind(Australia.summary,rares.M)
# read in rare speies grouping results (Spain)
rares.G<-rares[which(rares$Model=="Spain"),]
rares.G$Model<-"group.rares"
# read in other grouping resluts (Spain)
Spain.summary<-read.csv("Neigh.ID/output/Spain.neighbor.ID.summary.2019.by.species.csv")
Spain.summary<-Spain.summary[,-1]
# merge results together (Spain)
Spain.summary<-rbind(Spain.summary,rares.G)
##########################
# catch plot as pdf
CairoPDF(width=17,height=8,"figures/BOTH_radar_updated.pdf", bg="transparent")
# transform dataframe to long
MM<-Australia.summary %>%
gather(key=variable,value,-c(Model,focal,beta))
MM<-spread(MM,Model,value)
# list species names fully
M.nm<-c("A.caryophylla","H.glabra","P.gnaphalioides","T.ornata","U.anthemoides","W.acuminata")
# don't plot results for these groups as they are summarized elsewhere
groups<-unique(Australia.summary$Model)
groups<-groups[!groups%in%c("full","number.indivs")]
#subtract values from full value
subs<-MM[,which(names(MM) %in% groups)]-MM$full
# attach data together
JJ<-cbind(subs,focal=MM$focal,beta=MM$beta,variable=MM$variable)
# only pull out the data with includes AIC and HOIs
JJ<-JJ[which(JJ$beta=="TRUE"& JJ$variable=="AIC"),]
# only use the functional groups in groups
KK<-JJ[,which(names(JJ) %in% groups)]
# rownames are focal species names
rownames(KK)<-M.nm
# columns names are functional grouping names
names(KK)<-c("Trait Complex","Plant Family","Functional Type","Life Form","Native/Exotic","Group Rares")
# build dataframe specific to radar plot specificaton where the irst 3 rows need to be the max lim of plot,
#   the min lim of plots, and any lines you want to add to the plots (i.e. the dashed line a 0)
data<-data.frame(rbind(rep(20,dim(KK)[2]) , rep(-160,dim(KK)[2]) , rep(0,dim(KK)[2]),KK))
#calculate how many times each species X each functional group is less than 0 (will be center numbers)
HH<-apply(KK,2,function(x) length(which(x < 0)==T))
# assign colors for lines in plot
h<-c("firebrick2","darkorange1","gold","chartreuse2",
"dodgerblue","purple")
# make plot
colors_border<-c("black",h)
line.wd<-c(2,2,2,2,2,2,2)
line.typ<-c(5,1,1,1,1,1,1)
point.type<-c(32,20,20,20,20,20,20)
par(mfrow=c(1,2))
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , plwd=line.wd , plty=line.typ, pty=point.type,
#custom the grid
cglcol="grey70", cglty=1, axislabcol="grey40", seg=9, caxislabels=round(seq(-160,20,length.out=10)), cglwd=1.3,
#custom labels
vlcex=1.3, bg="grey"
)
legend("bottomleft", legend = rownames(data[-c(1:3),]), text.font=3,
bty = "n", pch=20 , col=colors_border[2:10] , text.col = "grey", cex=1, pt.cex=3)
# make inner numbers
text.x<-c(0,-0.06,-.06,0,.06,.06)
text.y<-c(.07,.04,-.04,-.07,-.04,.04)
text.labels<-c(HH)
text(text.x,text.y,text.labels,cex=1)
######## Spain data ###########################
# make data long
GG<-Spain.summary %>%
gather(key=variable,value,-c(Model,focal,beta))
GG<-spread(GG,Model,value)
# use only specific functional group results for plot
groups<-unique(Spain.summary$Model)
groups<-groups[!groups%in%c("full","number.indivs","native.exotic")]
# subtract values from full model
FF<-GG[,which(names(GG) %in% groups)]-GG$full
# bind data together
JJ<-cbind(FF,focal=GG$focal,beta=GG$beta,variable=GG$variable)
# pull out only AIC and HOI data
JJ<-JJ[which(JJ$beta=="TRUE"& JJ$variable=="AIC"),]
# use only the data in the selected functional groups
KK<-JJ[,which(names(JJ) %in% groups)]
colnames(KK)<-c("Trait Complex","Plant Family","Functional Type","Life Form","Group Rares")
# list species names full
G.nm<-c("C.tennuiflorum","C.fuscatum","C.mixtum","H.marinum","L.maroccanus","L.tribracteatum",
"P.incurva","P.coronopus","P.maritimus","P.paludosa","S.soda","S.laciniata")
rownames(KK)<-G.nm # assign species names to rownames
# bind data together specifically for radar plot rad-in strucutre
data<-data.frame(rbind(rep(15,dim(KK)[2]) , rep(-60,dim(KK)[2]) , rep(0,dim(KK)[2]),KK))
# summarize number of focals X groupings under 0 (will be venter numbers)
HH<-apply(KK,2,function(x) length(which(x < 0)==T))
# make plot
h<-c("firebrick2","darkorange1","gold","chartreuse2","darkgreen","cyan2","dodgerblue","blue4","purple","magenta2","chocolate4","lightslategrey")
colors_border<-c("black",h)
line.wd<-c(2,2,2,2,2,2,2,2,2,2,2,2,2)
line.typ<-c(5,1,1,1,1,1,1,1,1,1,1,1,1)
point.type<-c(32,20,20,20,20,20,20,20,20,20,20,20,20)
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , plwd=line.wd , plty=line.typ, pty=point.type,
#custom the grid
cglcol="grey70", cglty=1, axislabcol="grey40", seg=5, caxislabels=round(seq(-60,15,length.out=6)), cglwd=1.3,
#custom labels
vlcex=1.2, bg="grey"
)
# add legend
legend("bottomleft", legend = rownames(data[-c(1:3),]), text.font=3,
bty = "n", pch=20 , col=colors_border[2:13] , text.col = "grey", cex=1, pt.cex=3,ncol=1)
#make center numbers
text.x<-c(0,-0.085,-.065,.065,.085)
text.y<-c(.09,.04,-.07,-.07,.04)
text.labels<-c(HH)
text(text.x,text.y,text.labels,cex=1.0)
# end plot catch
dev.off()
print("Radar plot done")
# make radar plots
source("Neigh.ID/radar.plots.2019.R")
# clear R workspace
rm(list=ls())
############## load libraries #################
library(mvabund) # for model fitting
library(cluster) # for gower similarity and pam
library(plyr) # for rbind.fill
library(dplyr) # for data cleaning & piping
library(Cairo) # to save plot image
library(tidyr) # for gather()
library(fmsb) # for radar plot
# list data types
datas<-c("Australia","Spain")
##############################################
# read and clean raw data
source("raw.data/clean.raw.data.2019.R")
# run focal ID analysis
source("Focal.ID/focal.ID.model.run.2019.R")
# run rare neighbor species analysis
source("Species.grouping/Rare.grouping/rare.species.GROUPED.2019.R")
source("Species.grouping/Rare.grouping/rare.species.REMOVED.2019.R")
# create clusters
source("Species.grouping/Functional.trait.grouping/create.clusters.2019.R")
# create data list with various neighbor groupings
source("Neigh.ID/making.data.list.groupings.2019.R")
# run neighbor ID analysis
source("Neigh.ID/run.neigh.ID.whole.model.2019.R")
source("Neigh.ID/run.neigh.ID.by.species.2019.R")
# make radar plots
source("Neigh.ID/radar.plots.2019.R")
####
# function to fit the negative-binomial fecundity model
####
fecundity.model <- function(
data,
fit.alphas=FALSE,
fit.betas=FALSE,
...
){
library(mvabund)
# add in a dummy column to separate fecundity from focal (and make it easier to identify interaction coefs)
data$fecundity <- data$focal
# lets figure out who the observed competitors are
competitors <- colnames(data)[!colnames(data) %in% c("focal","fecundity","seeds","site","plot","quadrat")]
# start with no competition model
base.model.formula <- "seeds ~ 0 + fecundity"
# add the site fixed effect
if(nlevels(data$site)>1){
base.model.formula <- paste0(base.model.formula," + fecundity:site")
}
# in case it's the null
model.formula <- base.model.formula
# add pairwise coefficients for all competitor species
all.alphas <- c()
if(fit.alphas | fit.betas){
# all competitors are allowed an alpha
all.alphas <- competitors
# add the alphas to the model formula
model.formula <- paste0(model.formula, " + ", paste0(all.alphas, collapse=" + "))
}
# determine potential higher order interactions if so desired and add them to the model specification
all.betas <- c()
if(fit.betas){
# betas between conspecific neighbors
possible.intrabetas <- all.alphas
possible.intrabetas <- unlist(lapply(possible.intrabetas, function(x){paste0("I(",x," * (",x," - 1)/2)")}))
# betas between heterospecific neighbors
possible.interbetas <- combn(all.alphas,2)
possible.interbetas <- apply(possible.interbetas,2,paste,collapse=":")
# combine all betas together into a single variable
all.betas <- c(possible.intrabetas, possible.interbetas)
# add the betas to the model formula
model.formula <- paste0(model.formula, " + ", paste0(all.betas, collapse=" + "))
}
full.model.formula <- model.formula
m <- manyglm(
as.formula(model.formula),
family="negative.binomial",
data=data,model=T,
maxiter=100,
maxiter2=100,
...)
return(m)
}
rowSums(species.df)
# clear R workspace
rm(list=ls())
############## load libraries #################
library(mvabund) # for model fitting
library(cluster) # for gower similarity and pam
library(plyr) # for rbind.fill
library(dplyr) # for data cleaning & piping
library(Cairo) # to save plot image
library(tidyr) # for gather()
library(fmsb) # for radar plot
# list data types
datas<-c("Australia","Spain")
##############################################
# read and clean raw data
source("raw.data/clean.raw.data.2019.R")
d<-"Australia"
fecundity.data<-data.list[[d]]
# identitfy unique focal species
focals.list<-unique(fecundity.data$focal)
### count number of competitors and add to dataframe ####
if (d=="Australia") {
cols.ignore<-c("focal","seeds","quadrat","site")
D<-"Mayfield"
} else if (d=="Spain") {
D<-"Godoy"
cols.ignore<-c("focal","site","seeds")
}
# idetify first row of species for the dataframe
start.seq<-max(which(names(fecundity.data) %in% cols.ignore))+1
# identify the last row of species for the dataframe
end.seq<-dim(fecundity.data)[2]
# make a sequence of columns
seq<-seq(start.seq,end.seq,by=1)
# make empty vector
remove<-vector()
# pull out the non-species columns in the dataframe
DF.starter<-fecundity.data[,cols.ignore]
# pull out the species-only columns in the dataframe
species.df<-fecundity.data[,-which(names(fecundity.data) %in% cols.ignore)]
rowSums(species.df)
x<-rowSums(species.df)
for (b in 1:length(fecundity.data[,start.seq])) {
# if wanted to count numbee of soecies
species.count<-length(which(species.df[b,]>0))
comp.total<-sum(fecundity.data[b,start.seq:end.seq])
DF.starter$num.species.comp[b]<-species.count
DF.starter$total.num.competitor[b]<-comp.total
}
head(DF.starter)
head(x)
DF.starter$total.num.competitor<-rowSums(species.df)
# pull out the non-species columns in the dataframe
DF.starter<-fecundity.data[,cols.ignore]
# pull out the species-only columns in the dataframe
species.df<-fecundity.data[,-which(names(fecundity.data) %in% cols.ignore)]
DF.starter$total.num.competitor<-rowSums(species.df)
# assign species to functional groups
func.group.list[["native.p.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="perennial" & TR$grass_forb=="forb")]
func.group.list[["native.p.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="perennial" & TR$grass_forb=="grass")]
func.group.list[["exotic.a.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="annual" & TR$grass_forb=="forb")]
func.group.list[["exotic.a.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="annual" & TR$grass_forb=="grass")]
func.group.list[["native.a.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="annual" & TR$grass_forb=="forb")]
func.group.list[["native.a.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="annual" & TR$grass_forb=="grass")]
func.group.list[["exotic.p.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="perennial" & TR$grass_forb=="forb")]
func.group.list[["exotic.p.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="perennial" & TR$grass_forb=="grass")]
# make empty vector for groups that have no species
ele.rm<-vector()
# read in trait and cluster groupings
TR<-read.csv("Species.grouping/Functional.trait.grouping/output/traits.cluster.all.results.2019.csv")
# assign species to functional groups
func.group.list[["native.p.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="perennial" & TR$grass_forb=="forb")]
func.group.list[["native.p.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="perennial" & TR$grass_forb=="grass")]
func.group.list[["exotic.a.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="annual" & TR$grass_forb=="forb")]
func.group.list[["exotic.a.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="annual" & TR$grass_forb=="grass")]
func.group.list[["native.a.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="annual" & TR$grass_forb=="forb")]
func.group.list[["native.a.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="annual" & TR$grass_forb=="grass")]
func.group.list[["exotic.p.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="perennial" & TR$grass_forb=="forb")]
func.group.list[["exotic.p.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="perennial" & TR$grass_forb=="grass")]
########## functoinal groups X exotic native #################
func.group.list<-list()
# assign species to functional groups
func.group.list[["native.p.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="perennial" & TR$grass_forb=="forb")]
func.group.list[["native.p.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="perennial" & TR$grass_forb=="grass")]
func.group.list[["exotic.a.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="annual" & TR$grass_forb=="forb")]
func.group.list[["exotic.a.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="annual" & TR$grass_forb=="grass")]
func.group.list[["native.a.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="annual" & TR$grass_forb=="forb")]
func.group.list[["native.a.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="native" & TR$annual_perennial=="annual" & TR$grass_forb=="grass")]
func.group.list[["exotic.p.forb"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="perennial" & TR$grass_forb=="forb")]
func.group.list[["exotic.p.grass"]]<-TR$species.dataset.code[which(TR$Data==D & TR$native_extoic=="exotic" & TR$annual_perennial=="perennial" & TR$grass_forb=="grass")]
# make empty vector for groups that have no species
ele.rm<-vector()
# remove groups with no species
for (ii in 1:length(func.group.list)) {
if (length(func.group.list[[ii]])==0){
ele.rm<-append(ele.rm, ii)
} else {next}
}
func.group.list<-func.group.list[-ele.rm]
# list types of functional groups
type.func<-names(func.group.list)
type func
type.func
func.group.list[["native.p.forb"]]
fecundity.data
func.group.list[["native.p.forb"]]
fecundity.data[["Thysanotus.rectantherus"]]
fam.list<-list()
families<-unique(TR$family[which(TR$Data==D)])
families
